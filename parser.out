Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASPAS
    BREAK
    COMENTARIO
    LCOLCHETE
    RCOLCHETE
    READ
    RETURN
    STRINGS
    WRITE

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> print_stmt
Rule 6     declaration -> selection_stmt
Rule 7     declaration -> iteration_stmt
Rule 8     print_stmt -> PRINT LPAREN STRING RPAREN SEMI
Rule 9     print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI
Rule 10    print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI
Rule 11    print_stmt -> PRINT LPAREN boolean RPAREN SEMI
Rule 12    print_stmt -> PRINT LPAREN expression RPAREN SEMI
Rule 13    print_stmt -> PRINT LPAREN RPAREN SEMI
Rule 14    var_declaration -> IDENTIFIER var_declaration
Rule 15    var_declaration -> IDENTIFIER
Rule 16    var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration
Rule 17    var_declaration -> IDENTIFIER ATRIBUTION NUMBER
Rule 18    var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration
Rule 19    var_declaration -> IDENTIFIER ATRIBUTION boolean
Rule 20    var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
Rule 21    var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER
Rule 22    var_declaration -> IDENTIFIER ATRIBUTION simple_expression
Rule 23    statement -> expression_stmt
Rule 24    statement -> selection_stmt
Rule 25    statement -> iteration_stmt
Rule 26    statement -> print_stmt
Rule 27    expression_stmt -> expression
Rule 28    selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
Rule 29    selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement
Rule 30    selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
Rule 31    selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
Rule 32    iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
Rule 33    iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
Rule 34    iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
Rule 35    iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
Rule 36    iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN
Rule 37    expression -> var EQUALITY expression
Rule 38    expression -> simple_expression
Rule 39    expression -> var EQUALITY IDENTIFIER
Rule 40    expression -> expression LOG expression
Rule 41    expression -> expression OU_LOGICO expression
Rule 42    var -> IDENTIFIER
Rule 43    simple_expression -> additive_expression relop additive_expression
Rule 44    simple_expression -> additive_expression
Rule 45    relop -> MENOR
Rule 46    relop -> MENOREQUALS
Rule 47    relop -> MAIOR
Rule 48    relop -> MAIOREQUALS
Rule 49    relop -> DIFERENTE
Rule 50    relop -> EQUALITY
Rule 51    additive_expression -> additive_expression addop term
Rule 52    additive_expression -> term
Rule 53    additive_expression -> term MINUSMINUS
Rule 54    additive_expression -> term PLUSPLUS
Rule 55    addop -> PLUS
Rule 56    addop -> MINUS
Rule 57    term -> term mulop factor
Rule 58    term -> factor
Rule 59    mulop -> TIMES
Rule 60    mulop -> DIVIDE
Rule 61    factor -> LPAREN expression RPAREN
Rule 62    factor -> var
Rule 63    factor -> NUMBER
Rule 64    factor -> boolean
Rule 65    factor -> IDENTIFIER LPAREN args RPAREN
Rule 66    boolean -> TRUE
Rule 67    boolean -> FALSE
Rule 68    args -> args_list
Rule 69    args -> empty
Rule 70    args_list -> expression
Rule 71    expression -> expression PLUS term
Rule 72    expression -> expression MINUS term
Rule 73    expression -> expression TIMES term
Rule 74    expression -> expression DIVIDE term
Rule 75    expression -> expression TIMESX term
Rule 76    expression -> expression LOG term
Rule 77    expression -> expression OU_LOGICO term
Rule 78    empty -> <empty>

Terminals, with rules where they appear

ASPAS                : 
ATRIBUTION           : 16 17 18 19 20 21 22
BREAK                : 
COMENTARIO           : 
DIFERENTE            : 49
DIVIDE               : 60 74
DO                   : 36
ELSE                 : 28 31
EQUALITY             : 37 39 50
FALSE                : 67
FOR                  : 32 33
IDENTIFIER           : 9 14 15 16 17 18 19 20 20 21 21 22 39 42 65
IF                   : 28 29 30 31
LBRACE               : 28 28 29 30 31 31 32 33 34 35 36
LCOLCHETE            : 
LOG                  : 40 76
LPAREN               : 8 9 10 11 12 13 28 29 30 31 32 33 34 35 36 61 65
MAIOR                : 47
MAIOREQUALS          : 48
MENOR                : 45
MENOREQUALS          : 46
MINUS                : 56 72
MINUSMINUS           : 53
NUMBER               : 10 16 17 63
OU_LOGICO            : 41 77
PLUS                 : 55 71
PLUSPLUS             : 54
PRINT                : 8 9 10 11 12 13
RBRACE               : 28 28 29 30 31 31 32 33 34 35 36
RCOLCHETE            : 
READ                 : 
RETURN               : 
RPAREN               : 8 9 10 11 12 13 28 29 30 31 32 33 34 35 36 61 65
SEMI                 : 8 9 10 11 12 13 32 32 33 33 36
STRING               : 8
STRINGS              : 
TIMES                : 59 73
TIMESX               : 75
TRUE                 : 66
WHILE                : 34 35 36
WRITE                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 32 33 43 43 44 51
addop                : 51
args                 : 65
args_list            : 68
boolean              : 11 18 19 64
declaration          : 2 3
declaration_list     : 1 2
empty                : 69
expression           : 12 27 28 28 28 29 29 30 31 32 32 33 34 34 35 36 37 40 40 41 41 61 70 71 72 73 74 75 76 77
expression_stmt      : 23
factor               : 57 58
iteration_stmt       : 7 25
mulop                : 57
print_stmt           : 5 26 30 31 31 33 35
program              : 0
relop                : 43
selection_stmt       : 6 24
simple_expression    : 22 38
statement            : 28 29 32 34 36
term                 : 51 52 53 54 57 71 72 73 74 75 76 77
var                  : 37 39 62
var_declaration      : 4 14 16 18 20 32 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . print_stmt
    (6) declaration -> . selection_stmt
    (7) declaration -> . iteration_stmt
    (14) var_declaration -> . IDENTIFIER var_declaration
    (15) var_declaration -> . IDENTIFIER
    (16) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER
    (18) var_declaration -> . IDENTIFIER ATRIBUTION boolean var_declaration
    (19) var_declaration -> . IDENTIFIER ATRIBUTION boolean
    (20) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER
    (22) var_declaration -> . IDENTIFIER ATRIBUTION simple_expression
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (28) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (32) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (36) iteration_stmt -> . DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    var_declaration                shift and go to state 4
    print_stmt                     shift and go to state 5
    selection_stmt                 shift and go to state 6
    iteration_stmt                 shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . print_stmt
    (6) declaration -> . selection_stmt
    (7) declaration -> . iteration_stmt
    (14) var_declaration -> . IDENTIFIER var_declaration
    (15) var_declaration -> . IDENTIFIER
    (16) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER
    (18) var_declaration -> . IDENTIFIER ATRIBUTION boolean var_declaration
    (19) var_declaration -> . IDENTIFIER ATRIBUTION boolean
    (20) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER
    (22) var_declaration -> . IDENTIFIER ATRIBUTION simple_expression
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (28) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (32) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (36) iteration_stmt -> . DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> declaration_list .)
    IDENTIFIER      shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13

    declaration                    shift and go to state 14
    var_declaration                shift and go to state 4
    print_stmt                     shift and go to state 5
    selection_stmt                 shift and go to state 6
    iteration_stmt                 shift and go to state 7

state 3

    (3) declaration_list -> declaration .

    IDENTIFIER      reduce using rule 3 (declaration_list -> declaration .)
    PRINT           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    DO              reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 4

    (4) declaration -> var_declaration .

    IDENTIFIER      reduce using rule 4 (declaration -> var_declaration .)
    PRINT           reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    DO              reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 5

    (5) declaration -> print_stmt .

    IDENTIFIER      reduce using rule 5 (declaration -> print_stmt .)
    PRINT           reduce using rule 5 (declaration -> print_stmt .)
    IF              reduce using rule 5 (declaration -> print_stmt .)
    FOR             reduce using rule 5 (declaration -> print_stmt .)
    WHILE           reduce using rule 5 (declaration -> print_stmt .)
    DO              reduce using rule 5 (declaration -> print_stmt .)
    $end            reduce using rule 5 (declaration -> print_stmt .)


state 6

    (6) declaration -> selection_stmt .

    IDENTIFIER      reduce using rule 6 (declaration -> selection_stmt .)
    PRINT           reduce using rule 6 (declaration -> selection_stmt .)
    IF              reduce using rule 6 (declaration -> selection_stmt .)
    FOR             reduce using rule 6 (declaration -> selection_stmt .)
    WHILE           reduce using rule 6 (declaration -> selection_stmt .)
    DO              reduce using rule 6 (declaration -> selection_stmt .)
    $end            reduce using rule 6 (declaration -> selection_stmt .)


state 7

    (7) declaration -> iteration_stmt .

    IDENTIFIER      reduce using rule 7 (declaration -> iteration_stmt .)
    PRINT           reduce using rule 7 (declaration -> iteration_stmt .)
    IF              reduce using rule 7 (declaration -> iteration_stmt .)
    FOR             reduce using rule 7 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 7 (declaration -> iteration_stmt .)
    DO              reduce using rule 7 (declaration -> iteration_stmt .)
    $end            reduce using rule 7 (declaration -> iteration_stmt .)


state 8

    (14) var_declaration -> IDENTIFIER . var_declaration
    (15) var_declaration -> IDENTIFIER .
    (16) var_declaration -> IDENTIFIER . ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> IDENTIFIER . ATRIBUTION NUMBER
    (18) var_declaration -> IDENTIFIER . ATRIBUTION boolean var_declaration
    (19) var_declaration -> IDENTIFIER . ATRIBUTION boolean
    (20) var_declaration -> IDENTIFIER . ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> IDENTIFIER . ATRIBUTION IDENTIFIER
    (22) var_declaration -> IDENTIFIER . ATRIBUTION simple_expression
    (14) var_declaration -> . IDENTIFIER var_declaration
    (15) var_declaration -> . IDENTIFIER
    (16) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER
    (18) var_declaration -> . IDENTIFIER ATRIBUTION boolean var_declaration
    (19) var_declaration -> . IDENTIFIER ATRIBUTION boolean
    (20) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER
    (22) var_declaration -> . IDENTIFIER ATRIBUTION simple_expression

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    PRINT           reduce using rule 15 (var_declaration -> IDENTIFIER .)
    IF              reduce using rule 15 (var_declaration -> IDENTIFIER .)
    FOR             reduce using rule 15 (var_declaration -> IDENTIFIER .)
    WHILE           reduce using rule 15 (var_declaration -> IDENTIFIER .)
    DO              reduce using rule 15 (var_declaration -> IDENTIFIER .)
    $end            reduce using rule 15 (var_declaration -> IDENTIFIER .)
    SEMI            reduce using rule 15 (var_declaration -> IDENTIFIER .)
    ATRIBUTION      shift and go to state 16
    IDENTIFIER      shift and go to state 8

  ! IDENTIFIER      [ reduce using rule 15 (var_declaration -> IDENTIFIER .) ]

    var_declaration                shift and go to state 15

state 9

    (8) print_stmt -> PRINT . LPAREN STRING RPAREN SEMI
    (9) print_stmt -> PRINT . LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> PRINT . LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> PRINT . LPAREN boolean RPAREN SEMI
    (12) print_stmt -> PRINT . LPAREN expression RPAREN SEMI
    (13) print_stmt -> PRINT . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 17


state 10

    (28) selection_stmt -> IF . LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> IF . LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> IF . LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> IF . LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE

    LPAREN          shift and go to state 18


state 11

    (32) iteration_stmt -> FOR . LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR . LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE

    LPAREN          shift and go to state 19


state 12

    (34) iteration_stmt -> WHILE . LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> WHILE . LPAREN expression RPAREN LBRACE print_stmt RBRACE

    LPAREN          shift and go to state 20


state 13

    (36) iteration_stmt -> DO . LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN

    LBRACE          shift and go to state 21


state 14

    (2) declaration_list -> declaration_list declaration .

    IDENTIFIER      reduce using rule 2 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 15

    (14) var_declaration -> IDENTIFIER var_declaration .

    IDENTIFIER      reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)
    PRINT           reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)
    IF              reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)
    FOR             reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)
    WHILE           reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)
    DO              reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)
    $end            reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)
    SEMI            reduce using rule 14 (var_declaration -> IDENTIFIER var_declaration .)


state 16

    (16) var_declaration -> IDENTIFIER ATRIBUTION . NUMBER var_declaration
    (17) var_declaration -> IDENTIFIER ATRIBUTION . NUMBER
    (18) var_declaration -> IDENTIFIER ATRIBUTION . boolean var_declaration
    (19) var_declaration -> IDENTIFIER ATRIBUTION . boolean
    (20) var_declaration -> IDENTIFIER ATRIBUTION . IDENTIFIER var_declaration
    (21) var_declaration -> IDENTIFIER ATRIBUTION . IDENTIFIER
    (22) var_declaration -> IDENTIFIER ATRIBUTION . simple_expression
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER

    NUMBER          shift and go to state 23
    IDENTIFIER      shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 31

    boolean                        shift and go to state 24
    simple_expression              shift and go to state 25
    additive_expression            shift and go to state 28
    term                           shift and go to state 29
    factor                         shift and go to state 30
    var                            shift and go to state 32

state 17

    (8) print_stmt -> PRINT LPAREN . STRING RPAREN SEMI
    (9) print_stmt -> PRINT LPAREN . IDENTIFIER RPAREN SEMI
    (10) print_stmt -> PRINT LPAREN . NUMBER RPAREN SEMI
    (11) print_stmt -> PRINT LPAREN . boolean RPAREN SEMI
    (12) print_stmt -> PRINT LPAREN . expression RPAREN SEMI
    (13) print_stmt -> PRINT LPAREN . RPAREN SEMI
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN

    STRING          shift and go to state 33
    IDENTIFIER      shift and go to state 35
    NUMBER          shift and go to state 36
    RPAREN          shift and go to state 34
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 31

    boolean                        shift and go to state 37
    expression                     shift and go to state 38
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30

state 18

    (28) selection_stmt -> IF LPAREN . expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> IF LPAREN . expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> IF LPAREN . expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> IF LPAREN . expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 41
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 19

    (32) iteration_stmt -> FOR LPAREN . var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN . var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (14) var_declaration -> . IDENTIFIER var_declaration
    (15) var_declaration -> . IDENTIFIER
    (16) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER
    (18) var_declaration -> . IDENTIFIER ATRIBUTION boolean var_declaration
    (19) var_declaration -> . IDENTIFIER ATRIBUTION boolean
    (20) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER
    (22) var_declaration -> . IDENTIFIER ATRIBUTION simple_expression

    IDENTIFIER      shift and go to state 8

    var_declaration                shift and go to state 45

state 20

    (34) iteration_stmt -> WHILE LPAREN . expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> WHILE LPAREN . expression RPAREN LBRACE print_stmt RBRACE
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 46
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 21

    (36) iteration_stmt -> DO LBRACE . statement SEMI RBRACE WHILE LPAREN expression RPAREN
    (23) statement -> . expression_stmt
    (24) statement -> . selection_stmt
    (25) statement -> . iteration_stmt
    (26) statement -> . print_stmt
    (27) expression_stmt -> . expression
    (28) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (32) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (36) iteration_stmt -> . DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IF              shift and go to state 10
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    statement                      shift and go to state 47
    expression                     shift and go to state 48
    expression_stmt                shift and go to state 49
    selection_stmt                 shift and go to state 50
    iteration_stmt                 shift and go to state 51
    print_stmt                     shift and go to state 52
    additive_expression            shift and go to state 28
    boolean                        shift and go to state 44
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 22

    (20) var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER . var_declaration
    (21) var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .
    (65) factor -> IDENTIFIER . LPAREN args RPAREN
    (42) var -> IDENTIFIER .
    (14) var_declaration -> . IDENTIFIER var_declaration
    (15) var_declaration -> . IDENTIFIER
    (16) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER
    (18) var_declaration -> . IDENTIFIER ATRIBUTION boolean var_declaration
    (19) var_declaration -> . IDENTIFIER ATRIBUTION boolean
    (20) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER
    (22) var_declaration -> . IDENTIFIER ATRIBUTION simple_expression

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! reduce/reduce conflict for PRINT resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! reduce/reduce conflict for DO resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! reduce/reduce conflict for SEMI resolved using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    PRINT           reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
    IF              reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
    FOR             reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
    WHILE           reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
    DO              reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
    $end            reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
    SEMI            reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .)
    LPAREN          shift and go to state 54
    MINUSMINUS      reduce using rule 42 (var -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 42 (var -> IDENTIFIER .)
    TIMES           reduce using rule 42 (var -> IDENTIFIER .)
    DIVIDE          reduce using rule 42 (var -> IDENTIFIER .)
    MENOR           reduce using rule 42 (var -> IDENTIFIER .)
    MENOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    MAIOR           reduce using rule 42 (var -> IDENTIFIER .)
    MAIOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    DIFERENTE       reduce using rule 42 (var -> IDENTIFIER .)
    EQUALITY        reduce using rule 42 (var -> IDENTIFIER .)
    PLUS            reduce using rule 42 (var -> IDENTIFIER .)
    MINUS           reduce using rule 42 (var -> IDENTIFIER .)
    IDENTIFIER      shift and go to state 8

  ! IDENTIFIER      [ reduce using rule 21 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! PRINT           [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! DO              [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! SEMI            [ reduce using rule 42 (var -> IDENTIFIER .) ]

    var_declaration                shift and go to state 53

state 23

    (16) var_declaration -> IDENTIFIER ATRIBUTION NUMBER . var_declaration
    (17) var_declaration -> IDENTIFIER ATRIBUTION NUMBER .
    (63) factor -> NUMBER .
    (14) var_declaration -> . IDENTIFIER var_declaration
    (15) var_declaration -> . IDENTIFIER
    (16) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER
    (18) var_declaration -> . IDENTIFIER ATRIBUTION boolean var_declaration
    (19) var_declaration -> . IDENTIFIER ATRIBUTION boolean
    (20) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER
    (22) var_declaration -> . IDENTIFIER ATRIBUTION simple_expression

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! reduce/reduce conflict for DO resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! reduce/reduce conflict for SEMI resolved using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    PRINT           reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
    IF              reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
    FOR             reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
    WHILE           reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
    DO              reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
    $end            reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
    SEMI            reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .)
    MINUSMINUS      reduce using rule 63 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 63 (factor -> NUMBER .)
    TIMES           reduce using rule 63 (factor -> NUMBER .)
    DIVIDE          reduce using rule 63 (factor -> NUMBER .)
    MENOR           reduce using rule 63 (factor -> NUMBER .)
    MENOREQUALS     reduce using rule 63 (factor -> NUMBER .)
    MAIOR           reduce using rule 63 (factor -> NUMBER .)
    MAIOREQUALS     reduce using rule 63 (factor -> NUMBER .)
    DIFERENTE       reduce using rule 63 (factor -> NUMBER .)
    EQUALITY        reduce using rule 63 (factor -> NUMBER .)
    PLUS            reduce using rule 63 (factor -> NUMBER .)
    MINUS           reduce using rule 63 (factor -> NUMBER .)
    IDENTIFIER      shift and go to state 8

  ! IDENTIFIER      [ reduce using rule 17 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER .) ]
  ! IDENTIFIER      [ reduce using rule 63 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 63 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 63 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 63 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 63 (factor -> NUMBER .) ]
  ! DO              [ reduce using rule 63 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 63 (factor -> NUMBER .) ]
  ! SEMI            [ reduce using rule 63 (factor -> NUMBER .) ]

    var_declaration                shift and go to state 55

state 24

    (18) var_declaration -> IDENTIFIER ATRIBUTION boolean . var_declaration
    (19) var_declaration -> IDENTIFIER ATRIBUTION boolean .
    (64) factor -> boolean .
    (14) var_declaration -> . IDENTIFIER var_declaration
    (15) var_declaration -> . IDENTIFIER
    (16) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER var_declaration
    (17) var_declaration -> . IDENTIFIER ATRIBUTION NUMBER
    (18) var_declaration -> . IDENTIFIER ATRIBUTION boolean var_declaration
    (19) var_declaration -> . IDENTIFIER ATRIBUTION boolean
    (20) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER var_declaration
    (21) var_declaration -> . IDENTIFIER ATRIBUTION IDENTIFIER
    (22) var_declaration -> . IDENTIFIER ATRIBUTION simple_expression

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! reduce/reduce conflict for PRINT resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! reduce/reduce conflict for IF resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! reduce/reduce conflict for DO resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! reduce/reduce conflict for $end resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! reduce/reduce conflict for SEMI resolved using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    PRINT           reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
    IF              reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
    FOR             reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
    WHILE           reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
    DO              reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
    $end            reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
    SEMI            reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .)
    MINUSMINUS      reduce using rule 64 (factor -> boolean .)
    PLUSPLUS        reduce using rule 64 (factor -> boolean .)
    TIMES           reduce using rule 64 (factor -> boolean .)
    DIVIDE          reduce using rule 64 (factor -> boolean .)
    MENOR           reduce using rule 64 (factor -> boolean .)
    MENOREQUALS     reduce using rule 64 (factor -> boolean .)
    MAIOR           reduce using rule 64 (factor -> boolean .)
    MAIOREQUALS     reduce using rule 64 (factor -> boolean .)
    DIFERENTE       reduce using rule 64 (factor -> boolean .)
    EQUALITY        reduce using rule 64 (factor -> boolean .)
    PLUS            reduce using rule 64 (factor -> boolean .)
    MINUS           reduce using rule 64 (factor -> boolean .)
    IDENTIFIER      shift and go to state 8

  ! IDENTIFIER      [ reduce using rule 19 (var_declaration -> IDENTIFIER ATRIBUTION boolean .) ]
  ! IDENTIFIER      [ reduce using rule 64 (factor -> boolean .) ]
  ! PRINT           [ reduce using rule 64 (factor -> boolean .) ]
  ! IF              [ reduce using rule 64 (factor -> boolean .) ]
  ! FOR             [ reduce using rule 64 (factor -> boolean .) ]
  ! WHILE           [ reduce using rule 64 (factor -> boolean .) ]
  ! DO              [ reduce using rule 64 (factor -> boolean .) ]
  ! $end            [ reduce using rule 64 (factor -> boolean .) ]
  ! SEMI            [ reduce using rule 64 (factor -> boolean .) ]

    var_declaration                shift and go to state 56

state 25

    (22) var_declaration -> IDENTIFIER ATRIBUTION simple_expression .

    IDENTIFIER      reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)
    PRINT           reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)
    IF              reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)
    FOR             reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)
    WHILE           reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)
    DO              reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)
    $end            reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)
    SEMI            reduce using rule 22 (var_declaration -> IDENTIFIER ATRIBUTION simple_expression .)


state 26

    (66) boolean -> TRUE .

    IDENTIFIER      reduce using rule 66 (boolean -> TRUE .)
    PRINT           reduce using rule 66 (boolean -> TRUE .)
    IF              reduce using rule 66 (boolean -> TRUE .)
    FOR             reduce using rule 66 (boolean -> TRUE .)
    WHILE           reduce using rule 66 (boolean -> TRUE .)
    DO              reduce using rule 66 (boolean -> TRUE .)
    $end            reduce using rule 66 (boolean -> TRUE .)
    SEMI            reduce using rule 66 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 66 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 66 (boolean -> TRUE .)
    TIMES           reduce using rule 66 (boolean -> TRUE .)
    DIVIDE          reduce using rule 66 (boolean -> TRUE .)
    MENOR           reduce using rule 66 (boolean -> TRUE .)
    MENOREQUALS     reduce using rule 66 (boolean -> TRUE .)
    MAIOR           reduce using rule 66 (boolean -> TRUE .)
    MAIOREQUALS     reduce using rule 66 (boolean -> TRUE .)
    DIFERENTE       reduce using rule 66 (boolean -> TRUE .)
    EQUALITY        reduce using rule 66 (boolean -> TRUE .)
    PLUS            reduce using rule 66 (boolean -> TRUE .)
    MINUS           reduce using rule 66 (boolean -> TRUE .)
    RPAREN          reduce using rule 66 (boolean -> TRUE .)
    LOG             reduce using rule 66 (boolean -> TRUE .)
    OU_LOGICO       reduce using rule 66 (boolean -> TRUE .)
    TIMESX          reduce using rule 66 (boolean -> TRUE .)
    RBRACE          reduce using rule 66 (boolean -> TRUE .)


state 27

    (67) boolean -> FALSE .

    IDENTIFIER      reduce using rule 67 (boolean -> FALSE .)
    PRINT           reduce using rule 67 (boolean -> FALSE .)
    IF              reduce using rule 67 (boolean -> FALSE .)
    FOR             reduce using rule 67 (boolean -> FALSE .)
    WHILE           reduce using rule 67 (boolean -> FALSE .)
    DO              reduce using rule 67 (boolean -> FALSE .)
    $end            reduce using rule 67 (boolean -> FALSE .)
    SEMI            reduce using rule 67 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 67 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 67 (boolean -> FALSE .)
    TIMES           reduce using rule 67 (boolean -> FALSE .)
    DIVIDE          reduce using rule 67 (boolean -> FALSE .)
    MENOR           reduce using rule 67 (boolean -> FALSE .)
    MENOREQUALS     reduce using rule 67 (boolean -> FALSE .)
    MAIOR           reduce using rule 67 (boolean -> FALSE .)
    MAIOREQUALS     reduce using rule 67 (boolean -> FALSE .)
    DIFERENTE       reduce using rule 67 (boolean -> FALSE .)
    EQUALITY        reduce using rule 67 (boolean -> FALSE .)
    PLUS            reduce using rule 67 (boolean -> FALSE .)
    MINUS           reduce using rule 67 (boolean -> FALSE .)
    RPAREN          reduce using rule 67 (boolean -> FALSE .)
    LOG             reduce using rule 67 (boolean -> FALSE .)
    OU_LOGICO       reduce using rule 67 (boolean -> FALSE .)
    TIMESX          reduce using rule 67 (boolean -> FALSE .)
    RBRACE          reduce using rule 67 (boolean -> FALSE .)


state 28

    (43) simple_expression -> additive_expression . relop additive_expression
    (44) simple_expression -> additive_expression .
    (51) additive_expression -> additive_expression . addop term
    (45) relop -> . MENOR
    (46) relop -> . MENOREQUALS
    (47) relop -> . MAIOR
    (48) relop -> . MAIOREQUALS
    (49) relop -> . DIFERENTE
    (50) relop -> . EQUALITY
    (55) addop -> . PLUS
    (56) addop -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    IDENTIFIER      reduce using rule 44 (simple_expression -> additive_expression .)
    PRINT           reduce using rule 44 (simple_expression -> additive_expression .)
    IF              reduce using rule 44 (simple_expression -> additive_expression .)
    FOR             reduce using rule 44 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 44 (simple_expression -> additive_expression .)
    DO              reduce using rule 44 (simple_expression -> additive_expression .)
    $end            reduce using rule 44 (simple_expression -> additive_expression .)
    SEMI            reduce using rule 44 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 44 (simple_expression -> additive_expression .)
    LOG             reduce using rule 44 (simple_expression -> additive_expression .)
    OU_LOGICO       reduce using rule 44 (simple_expression -> additive_expression .)
    TIMES           reduce using rule 44 (simple_expression -> additive_expression .)
    DIVIDE          reduce using rule 44 (simple_expression -> additive_expression .)
    TIMESX          reduce using rule 44 (simple_expression -> additive_expression .)
    RBRACE          reduce using rule 44 (simple_expression -> additive_expression .)
    MENOR           shift and go to state 59
    MENOREQUALS     shift and go to state 60
    MAIOR           shift and go to state 61
    MAIOREQUALS     shift and go to state 62
    DIFERENTE       shift and go to state 63
    EQUALITY        shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66

  ! PLUS            [ reduce using rule 44 (simple_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 44 (simple_expression -> additive_expression .) ]

    relop                          shift and go to state 57
    addop                          shift and go to state 58

state 29

    (52) additive_expression -> term .
    (53) additive_expression -> term . MINUSMINUS
    (54) additive_expression -> term . PLUSPLUS
    (57) term -> term . mulop factor
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    MENOR           reduce using rule 52 (additive_expression -> term .)
    MENOREQUALS     reduce using rule 52 (additive_expression -> term .)
    MAIOR           reduce using rule 52 (additive_expression -> term .)
    MAIOREQUALS     reduce using rule 52 (additive_expression -> term .)
    DIFERENTE       reduce using rule 52 (additive_expression -> term .)
    EQUALITY        reduce using rule 52 (additive_expression -> term .)
    PLUS            reduce using rule 52 (additive_expression -> term .)
    MINUS           reduce using rule 52 (additive_expression -> term .)
    IDENTIFIER      reduce using rule 52 (additive_expression -> term .)
    PRINT           reduce using rule 52 (additive_expression -> term .)
    IF              reduce using rule 52 (additive_expression -> term .)
    FOR             reduce using rule 52 (additive_expression -> term .)
    WHILE           reduce using rule 52 (additive_expression -> term .)
    DO              reduce using rule 52 (additive_expression -> term .)
    $end            reduce using rule 52 (additive_expression -> term .)
    SEMI            reduce using rule 52 (additive_expression -> term .)
    RPAREN          reduce using rule 52 (additive_expression -> term .)
    LOG             reduce using rule 52 (additive_expression -> term .)
    OU_LOGICO       reduce using rule 52 (additive_expression -> term .)
    TIMESX          reduce using rule 52 (additive_expression -> term .)
    RBRACE          reduce using rule 52 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 67
    PLUSPLUS        shift and go to state 68
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71

  ! TIMES           [ reduce using rule 52 (additive_expression -> term .) ]
  ! DIVIDE          [ reduce using rule 52 (additive_expression -> term .) ]

    mulop                          shift and go to state 69

state 30

    (58) term -> factor .

    MINUSMINUS      reduce using rule 58 (term -> factor .)
    PLUSPLUS        reduce using rule 58 (term -> factor .)
    TIMES           reduce using rule 58 (term -> factor .)
    DIVIDE          reduce using rule 58 (term -> factor .)
    MENOR           reduce using rule 58 (term -> factor .)
    MENOREQUALS     reduce using rule 58 (term -> factor .)
    MAIOR           reduce using rule 58 (term -> factor .)
    MAIOREQUALS     reduce using rule 58 (term -> factor .)
    DIFERENTE       reduce using rule 58 (term -> factor .)
    EQUALITY        reduce using rule 58 (term -> factor .)
    PLUS            reduce using rule 58 (term -> factor .)
    MINUS           reduce using rule 58 (term -> factor .)
    IDENTIFIER      reduce using rule 58 (term -> factor .)
    PRINT           reduce using rule 58 (term -> factor .)
    IF              reduce using rule 58 (term -> factor .)
    FOR             reduce using rule 58 (term -> factor .)
    WHILE           reduce using rule 58 (term -> factor .)
    DO              reduce using rule 58 (term -> factor .)
    $end            reduce using rule 58 (term -> factor .)
    SEMI            reduce using rule 58 (term -> factor .)
    RPAREN          reduce using rule 58 (term -> factor .)
    LOG             reduce using rule 58 (term -> factor .)
    OU_LOGICO       reduce using rule 58 (term -> factor .)
    TIMESX          reduce using rule 58 (term -> factor .)
    RBRACE          reduce using rule 58 (term -> factor .)


state 31

    (61) factor -> LPAREN . expression RPAREN
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 72
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 32

    (62) factor -> var .

    MINUSMINUS      reduce using rule 62 (factor -> var .)
    PLUSPLUS        reduce using rule 62 (factor -> var .)
    TIMES           reduce using rule 62 (factor -> var .)
    DIVIDE          reduce using rule 62 (factor -> var .)
    MENOR           reduce using rule 62 (factor -> var .)
    MENOREQUALS     reduce using rule 62 (factor -> var .)
    MAIOR           reduce using rule 62 (factor -> var .)
    MAIOREQUALS     reduce using rule 62 (factor -> var .)
    DIFERENTE       reduce using rule 62 (factor -> var .)
    EQUALITY        reduce using rule 62 (factor -> var .)
    PLUS            reduce using rule 62 (factor -> var .)
    MINUS           reduce using rule 62 (factor -> var .)
    IDENTIFIER      reduce using rule 62 (factor -> var .)
    PRINT           reduce using rule 62 (factor -> var .)
    IF              reduce using rule 62 (factor -> var .)
    FOR             reduce using rule 62 (factor -> var .)
    WHILE           reduce using rule 62 (factor -> var .)
    DO              reduce using rule 62 (factor -> var .)
    $end            reduce using rule 62 (factor -> var .)
    SEMI            reduce using rule 62 (factor -> var .)
    RPAREN          reduce using rule 62 (factor -> var .)
    LOG             reduce using rule 62 (factor -> var .)
    OU_LOGICO       reduce using rule 62 (factor -> var .)
    TIMESX          reduce using rule 62 (factor -> var .)
    RBRACE          reduce using rule 62 (factor -> var .)


state 33

    (8) print_stmt -> PRINT LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 73


state 34

    (13) print_stmt -> PRINT LPAREN RPAREN . SEMI

    SEMI            shift and go to state 74


state 35

    (9) print_stmt -> PRINT LPAREN IDENTIFIER . RPAREN SEMI
    (42) var -> IDENTIFIER .
    (65) factor -> IDENTIFIER . LPAREN args RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 75
    EQUALITY        reduce using rule 42 (var -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 42 (var -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 42 (var -> IDENTIFIER .)
    TIMES           reduce using rule 42 (var -> IDENTIFIER .)
    DIVIDE          reduce using rule 42 (var -> IDENTIFIER .)
    MENOR           reduce using rule 42 (var -> IDENTIFIER .)
    MENOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    MAIOR           reduce using rule 42 (var -> IDENTIFIER .)
    MAIOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    DIFERENTE       reduce using rule 42 (var -> IDENTIFIER .)
    PLUS            reduce using rule 42 (var -> IDENTIFIER .)
    MINUS           reduce using rule 42 (var -> IDENTIFIER .)
    LOG             reduce using rule 42 (var -> IDENTIFIER .)
    OU_LOGICO       reduce using rule 42 (var -> IDENTIFIER .)
    TIMESX          reduce using rule 42 (var -> IDENTIFIER .)
    LPAREN          shift and go to state 54

  ! RPAREN          [ reduce using rule 42 (var -> IDENTIFIER .) ]


state 36

    (10) print_stmt -> PRINT LPAREN NUMBER . RPAREN SEMI
    (63) factor -> NUMBER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 76
    MINUSMINUS      reduce using rule 63 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 63 (factor -> NUMBER .)
    TIMES           reduce using rule 63 (factor -> NUMBER .)
    DIVIDE          reduce using rule 63 (factor -> NUMBER .)
    MENOR           reduce using rule 63 (factor -> NUMBER .)
    MENOREQUALS     reduce using rule 63 (factor -> NUMBER .)
    MAIOR           reduce using rule 63 (factor -> NUMBER .)
    MAIOREQUALS     reduce using rule 63 (factor -> NUMBER .)
    DIFERENTE       reduce using rule 63 (factor -> NUMBER .)
    EQUALITY        reduce using rule 63 (factor -> NUMBER .)
    PLUS            reduce using rule 63 (factor -> NUMBER .)
    MINUS           reduce using rule 63 (factor -> NUMBER .)
    LOG             reduce using rule 63 (factor -> NUMBER .)
    OU_LOGICO       reduce using rule 63 (factor -> NUMBER .)
    TIMESX          reduce using rule 63 (factor -> NUMBER .)

  ! RPAREN          [ reduce using rule 63 (factor -> NUMBER .) ]


state 37

    (11) print_stmt -> PRINT LPAREN boolean . RPAREN SEMI
    (64) factor -> boolean .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 77
    MINUSMINUS      reduce using rule 64 (factor -> boolean .)
    PLUSPLUS        reduce using rule 64 (factor -> boolean .)
    TIMES           reduce using rule 64 (factor -> boolean .)
    DIVIDE          reduce using rule 64 (factor -> boolean .)
    MENOR           reduce using rule 64 (factor -> boolean .)
    MENOREQUALS     reduce using rule 64 (factor -> boolean .)
    MAIOR           reduce using rule 64 (factor -> boolean .)
    MAIOREQUALS     reduce using rule 64 (factor -> boolean .)
    DIFERENTE       reduce using rule 64 (factor -> boolean .)
    EQUALITY        reduce using rule 64 (factor -> boolean .)
    PLUS            reduce using rule 64 (factor -> boolean .)
    MINUS           reduce using rule 64 (factor -> boolean .)
    LOG             reduce using rule 64 (factor -> boolean .)
    OU_LOGICO       reduce using rule 64 (factor -> boolean .)
    TIMESX          reduce using rule 64 (factor -> boolean .)

  ! RPAREN          [ reduce using rule 64 (factor -> boolean .) ]


state 38

    (12) print_stmt -> PRINT LPAREN expression . RPAREN SEMI
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          shift and go to state 78
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 39

    (37) expression -> var . EQUALITY expression
    (39) expression -> var . EQUALITY IDENTIFIER
    (62) factor -> var .

  ! shift/reduce conflict for EQUALITY resolved as shift
    EQUALITY        shift and go to state 86
    MINUSMINUS      reduce using rule 62 (factor -> var .)
    PLUSPLUS        reduce using rule 62 (factor -> var .)
    TIMES           reduce using rule 62 (factor -> var .)
    DIVIDE          reduce using rule 62 (factor -> var .)
    MENOR           reduce using rule 62 (factor -> var .)
    MENOREQUALS     reduce using rule 62 (factor -> var .)
    MAIOR           reduce using rule 62 (factor -> var .)
    MAIOREQUALS     reduce using rule 62 (factor -> var .)
    DIFERENTE       reduce using rule 62 (factor -> var .)
    PLUS            reduce using rule 62 (factor -> var .)
    MINUS           reduce using rule 62 (factor -> var .)
    RPAREN          reduce using rule 62 (factor -> var .)
    LOG             reduce using rule 62 (factor -> var .)
    OU_LOGICO       reduce using rule 62 (factor -> var .)
    TIMESX          reduce using rule 62 (factor -> var .)
    SEMI            reduce using rule 62 (factor -> var .)
    RBRACE          reduce using rule 62 (factor -> var .)
    IDENTIFIER      reduce using rule 62 (factor -> var .)
    PRINT           reduce using rule 62 (factor -> var .)
    IF              reduce using rule 62 (factor -> var .)
    FOR             reduce using rule 62 (factor -> var .)
    WHILE           reduce using rule 62 (factor -> var .)
    DO              reduce using rule 62 (factor -> var .)
    $end            reduce using rule 62 (factor -> var .)

  ! EQUALITY        [ reduce using rule 62 (factor -> var .) ]


state 40

    (38) expression -> simple_expression .

    RPAREN          reduce using rule 38 (expression -> simple_expression .)
    LOG             reduce using rule 38 (expression -> simple_expression .)
    OU_LOGICO       reduce using rule 38 (expression -> simple_expression .)
    PLUS            reduce using rule 38 (expression -> simple_expression .)
    MINUS           reduce using rule 38 (expression -> simple_expression .)
    TIMES           reduce using rule 38 (expression -> simple_expression .)
    DIVIDE          reduce using rule 38 (expression -> simple_expression .)
    TIMESX          reduce using rule 38 (expression -> simple_expression .)
    SEMI            reduce using rule 38 (expression -> simple_expression .)
    RBRACE          reduce using rule 38 (expression -> simple_expression .)
    IDENTIFIER      reduce using rule 38 (expression -> simple_expression .)
    PRINT           reduce using rule 38 (expression -> simple_expression .)
    IF              reduce using rule 38 (expression -> simple_expression .)
    FOR             reduce using rule 38 (expression -> simple_expression .)
    WHILE           reduce using rule 38 (expression -> simple_expression .)
    DO              reduce using rule 38 (expression -> simple_expression .)
    $end            reduce using rule 38 (expression -> simple_expression .)


state 41

    (28) selection_stmt -> IF LPAREN expression . RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> IF LPAREN expression . RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> IF LPAREN expression . RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> IF LPAREN expression . RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          shift and go to state 87
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 42

    (42) var -> IDENTIFIER .
    (65) factor -> IDENTIFIER . LPAREN args RPAREN

    EQUALITY        reduce using rule 42 (var -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 42 (var -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 42 (var -> IDENTIFIER .)
    TIMES           reduce using rule 42 (var -> IDENTIFIER .)
    DIVIDE          reduce using rule 42 (var -> IDENTIFIER .)
    MENOR           reduce using rule 42 (var -> IDENTIFIER .)
    MENOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    MAIOR           reduce using rule 42 (var -> IDENTIFIER .)
    MAIOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    DIFERENTE       reduce using rule 42 (var -> IDENTIFIER .)
    PLUS            reduce using rule 42 (var -> IDENTIFIER .)
    MINUS           reduce using rule 42 (var -> IDENTIFIER .)
    RPAREN          reduce using rule 42 (var -> IDENTIFIER .)
    LOG             reduce using rule 42 (var -> IDENTIFIER .)
    OU_LOGICO       reduce using rule 42 (var -> IDENTIFIER .)
    TIMESX          reduce using rule 42 (var -> IDENTIFIER .)
    SEMI            reduce using rule 42 (var -> IDENTIFIER .)
    RBRACE          reduce using rule 42 (var -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 42 (var -> IDENTIFIER .)
    PRINT           reduce using rule 42 (var -> IDENTIFIER .)
    IF              reduce using rule 42 (var -> IDENTIFIER .)
    FOR             reduce using rule 42 (var -> IDENTIFIER .)
    WHILE           reduce using rule 42 (var -> IDENTIFIER .)
    DO              reduce using rule 42 (var -> IDENTIFIER .)
    $end            reduce using rule 42 (var -> IDENTIFIER .)
    LPAREN          shift and go to state 54


state 43

    (63) factor -> NUMBER .

    MINUSMINUS      reduce using rule 63 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 63 (factor -> NUMBER .)
    TIMES           reduce using rule 63 (factor -> NUMBER .)
    DIVIDE          reduce using rule 63 (factor -> NUMBER .)
    MENOR           reduce using rule 63 (factor -> NUMBER .)
    MENOREQUALS     reduce using rule 63 (factor -> NUMBER .)
    MAIOR           reduce using rule 63 (factor -> NUMBER .)
    MAIOREQUALS     reduce using rule 63 (factor -> NUMBER .)
    DIFERENTE       reduce using rule 63 (factor -> NUMBER .)
    EQUALITY        reduce using rule 63 (factor -> NUMBER .)
    PLUS            reduce using rule 63 (factor -> NUMBER .)
    MINUS           reduce using rule 63 (factor -> NUMBER .)
    RPAREN          reduce using rule 63 (factor -> NUMBER .)
    LOG             reduce using rule 63 (factor -> NUMBER .)
    OU_LOGICO       reduce using rule 63 (factor -> NUMBER .)
    TIMESX          reduce using rule 63 (factor -> NUMBER .)
    SEMI            reduce using rule 63 (factor -> NUMBER .)
    IDENTIFIER      reduce using rule 63 (factor -> NUMBER .)
    PRINT           reduce using rule 63 (factor -> NUMBER .)
    IF              reduce using rule 63 (factor -> NUMBER .)
    FOR             reduce using rule 63 (factor -> NUMBER .)
    WHILE           reduce using rule 63 (factor -> NUMBER .)
    DO              reduce using rule 63 (factor -> NUMBER .)
    $end            reduce using rule 63 (factor -> NUMBER .)
    RBRACE          reduce using rule 63 (factor -> NUMBER .)


state 44

    (64) factor -> boolean .

    MINUSMINUS      reduce using rule 64 (factor -> boolean .)
    PLUSPLUS        reduce using rule 64 (factor -> boolean .)
    TIMES           reduce using rule 64 (factor -> boolean .)
    DIVIDE          reduce using rule 64 (factor -> boolean .)
    MENOR           reduce using rule 64 (factor -> boolean .)
    MENOREQUALS     reduce using rule 64 (factor -> boolean .)
    MAIOR           reduce using rule 64 (factor -> boolean .)
    MAIOREQUALS     reduce using rule 64 (factor -> boolean .)
    DIFERENTE       reduce using rule 64 (factor -> boolean .)
    EQUALITY        reduce using rule 64 (factor -> boolean .)
    PLUS            reduce using rule 64 (factor -> boolean .)
    MINUS           reduce using rule 64 (factor -> boolean .)
    RPAREN          reduce using rule 64 (factor -> boolean .)
    LOG             reduce using rule 64 (factor -> boolean .)
    OU_LOGICO       reduce using rule 64 (factor -> boolean .)
    TIMESX          reduce using rule 64 (factor -> boolean .)
    SEMI            reduce using rule 64 (factor -> boolean .)
    IDENTIFIER      reduce using rule 64 (factor -> boolean .)
    PRINT           reduce using rule 64 (factor -> boolean .)
    IF              reduce using rule 64 (factor -> boolean .)
    FOR             reduce using rule 64 (factor -> boolean .)
    WHILE           reduce using rule 64 (factor -> boolean .)
    DO              reduce using rule 64 (factor -> boolean .)
    $end            reduce using rule 64 (factor -> boolean .)
    RBRACE          reduce using rule 64 (factor -> boolean .)


state 45

    (32) iteration_stmt -> FOR LPAREN var_declaration . SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN var_declaration . SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE

    SEMI            shift and go to state 88


state 46

    (34) iteration_stmt -> WHILE LPAREN expression . RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> WHILE LPAREN expression . RPAREN LBRACE print_stmt RBRACE
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          shift and go to state 89
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 47

    (36) iteration_stmt -> DO LBRACE statement . SEMI RBRACE WHILE LPAREN expression RPAREN

    SEMI            shift and go to state 90


state 48

    (27) expression_stmt -> expression .
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    SEMI            reduce using rule 27 (expression_stmt -> expression .)
    IDENTIFIER      reduce using rule 27 (expression_stmt -> expression .)
    PRINT           reduce using rule 27 (expression_stmt -> expression .)
    IF              reduce using rule 27 (expression_stmt -> expression .)
    FOR             reduce using rule 27 (expression_stmt -> expression .)
    WHILE           reduce using rule 27 (expression_stmt -> expression .)
    DO              reduce using rule 27 (expression_stmt -> expression .)
    $end            reduce using rule 27 (expression_stmt -> expression .)
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 49

    (23) statement -> expression_stmt .

    SEMI            reduce using rule 23 (statement -> expression_stmt .)
    IDENTIFIER      reduce using rule 23 (statement -> expression_stmt .)
    PRINT           reduce using rule 23 (statement -> expression_stmt .)
    IF              reduce using rule 23 (statement -> expression_stmt .)
    FOR             reduce using rule 23 (statement -> expression_stmt .)
    WHILE           reduce using rule 23 (statement -> expression_stmt .)
    DO              reduce using rule 23 (statement -> expression_stmt .)
    $end            reduce using rule 23 (statement -> expression_stmt .)


state 50

    (24) statement -> selection_stmt .

    SEMI            reduce using rule 24 (statement -> selection_stmt .)
    IDENTIFIER      reduce using rule 24 (statement -> selection_stmt .)
    PRINT           reduce using rule 24 (statement -> selection_stmt .)
    IF              reduce using rule 24 (statement -> selection_stmt .)
    FOR             reduce using rule 24 (statement -> selection_stmt .)
    WHILE           reduce using rule 24 (statement -> selection_stmt .)
    DO              reduce using rule 24 (statement -> selection_stmt .)
    $end            reduce using rule 24 (statement -> selection_stmt .)


state 51

    (25) statement -> iteration_stmt .

    SEMI            reduce using rule 25 (statement -> iteration_stmt .)
    IDENTIFIER      reduce using rule 25 (statement -> iteration_stmt .)
    PRINT           reduce using rule 25 (statement -> iteration_stmt .)
    IF              reduce using rule 25 (statement -> iteration_stmt .)
    FOR             reduce using rule 25 (statement -> iteration_stmt .)
    WHILE           reduce using rule 25 (statement -> iteration_stmt .)
    DO              reduce using rule 25 (statement -> iteration_stmt .)
    $end            reduce using rule 25 (statement -> iteration_stmt .)


state 52

    (26) statement -> print_stmt .

    SEMI            reduce using rule 26 (statement -> print_stmt .)
    IDENTIFIER      reduce using rule 26 (statement -> print_stmt .)
    PRINT           reduce using rule 26 (statement -> print_stmt .)
    IF              reduce using rule 26 (statement -> print_stmt .)
    FOR             reduce using rule 26 (statement -> print_stmt .)
    WHILE           reduce using rule 26 (statement -> print_stmt .)
    DO              reduce using rule 26 (statement -> print_stmt .)
    $end            reduce using rule 26 (statement -> print_stmt .)


state 53

    (20) var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .

    IDENTIFIER      reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)
    PRINT           reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)
    IF              reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)
    FOR             reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)
    WHILE           reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)
    DO              reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)
    $end            reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)
    SEMI            reduce using rule 20 (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER var_declaration .)


state 54

    (65) factor -> IDENTIFIER LPAREN . args RPAREN
    (68) args -> . args_list
    (69) args -> . empty
    (70) args_list -> . expression
    (78) empty -> .
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    RPAREN          reduce using rule 78 (empty -> .)
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    args                           shift and go to state 91
    args_list                      shift and go to state 92
    empty                          shift and go to state 93
    expression                     shift and go to state 94
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 55

    (16) var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .

    IDENTIFIER      reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)
    PRINT           reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)
    IF              reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)
    FOR             reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)
    WHILE           reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)
    DO              reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)
    $end            reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)
    SEMI            reduce using rule 16 (var_declaration -> IDENTIFIER ATRIBUTION NUMBER var_declaration .)


state 56

    (18) var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .

    IDENTIFIER      reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)
    PRINT           reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)
    IF              reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)
    FOR             reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)
    WHILE           reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)
    DO              reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)
    $end            reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)
    SEMI            reduce using rule 18 (var_declaration -> IDENTIFIER ATRIBUTION boolean var_declaration .)


state 57

    (43) simple_expression -> additive_expression relop . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    additive_expression            shift and go to state 95
    term                           shift and go to state 29
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 58

    (51) additive_expression -> additive_expression addop . term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    term                           shift and go to state 97
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 59

    (45) relop -> MENOR .

    LPAREN          reduce using rule 45 (relop -> MENOR .)
    NUMBER          reduce using rule 45 (relop -> MENOR .)
    IDENTIFIER      reduce using rule 45 (relop -> MENOR .)
    TRUE            reduce using rule 45 (relop -> MENOR .)
    FALSE           reduce using rule 45 (relop -> MENOR .)


state 60

    (46) relop -> MENOREQUALS .

    LPAREN          reduce using rule 46 (relop -> MENOREQUALS .)
    NUMBER          reduce using rule 46 (relop -> MENOREQUALS .)
    IDENTIFIER      reduce using rule 46 (relop -> MENOREQUALS .)
    TRUE            reduce using rule 46 (relop -> MENOREQUALS .)
    FALSE           reduce using rule 46 (relop -> MENOREQUALS .)


state 61

    (47) relop -> MAIOR .

    LPAREN          reduce using rule 47 (relop -> MAIOR .)
    NUMBER          reduce using rule 47 (relop -> MAIOR .)
    IDENTIFIER      reduce using rule 47 (relop -> MAIOR .)
    TRUE            reduce using rule 47 (relop -> MAIOR .)
    FALSE           reduce using rule 47 (relop -> MAIOR .)


state 62

    (48) relop -> MAIOREQUALS .

    LPAREN          reduce using rule 48 (relop -> MAIOREQUALS .)
    NUMBER          reduce using rule 48 (relop -> MAIOREQUALS .)
    IDENTIFIER      reduce using rule 48 (relop -> MAIOREQUALS .)
    TRUE            reduce using rule 48 (relop -> MAIOREQUALS .)
    FALSE           reduce using rule 48 (relop -> MAIOREQUALS .)


state 63

    (49) relop -> DIFERENTE .

    LPAREN          reduce using rule 49 (relop -> DIFERENTE .)
    NUMBER          reduce using rule 49 (relop -> DIFERENTE .)
    IDENTIFIER      reduce using rule 49 (relop -> DIFERENTE .)
    TRUE            reduce using rule 49 (relop -> DIFERENTE .)
    FALSE           reduce using rule 49 (relop -> DIFERENTE .)


state 64

    (50) relop -> EQUALITY .

    LPAREN          reduce using rule 50 (relop -> EQUALITY .)
    NUMBER          reduce using rule 50 (relop -> EQUALITY .)
    IDENTIFIER      reduce using rule 50 (relop -> EQUALITY .)
    TRUE            reduce using rule 50 (relop -> EQUALITY .)
    FALSE           reduce using rule 50 (relop -> EQUALITY .)


state 65

    (55) addop -> PLUS .

    LPAREN          reduce using rule 55 (addop -> PLUS .)
    NUMBER          reduce using rule 55 (addop -> PLUS .)
    IDENTIFIER      reduce using rule 55 (addop -> PLUS .)
    TRUE            reduce using rule 55 (addop -> PLUS .)
    FALSE           reduce using rule 55 (addop -> PLUS .)


state 66

    (56) addop -> MINUS .

    LPAREN          reduce using rule 56 (addop -> MINUS .)
    NUMBER          reduce using rule 56 (addop -> MINUS .)
    IDENTIFIER      reduce using rule 56 (addop -> MINUS .)
    TRUE            reduce using rule 56 (addop -> MINUS .)
    FALSE           reduce using rule 56 (addop -> MINUS .)


state 67

    (53) additive_expression -> term MINUSMINUS .

    MENOR           reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    MENOREQUALS     reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    MAIOR           reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    MAIOREQUALS     reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    DIFERENTE       reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    EQUALITY        reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    IDENTIFIER      reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    PRINT           reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    IF              reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    FOR             reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    WHILE           reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    DO              reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    $end            reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    SEMI            reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    LOG             reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    OU_LOGICO       reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    TIMES           reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    DIVIDE          reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    TIMESX          reduce using rule 53 (additive_expression -> term MINUSMINUS .)
    RBRACE          reduce using rule 53 (additive_expression -> term MINUSMINUS .)


state 68

    (54) additive_expression -> term PLUSPLUS .

    MENOR           reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    MENOREQUALS     reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    MAIOR           reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    MAIOREQUALS     reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    DIFERENTE       reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    EQUALITY        reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    IDENTIFIER      reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    PRINT           reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    IF              reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    FOR             reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    WHILE           reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    DO              reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    $end            reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    SEMI            reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    LOG             reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    OU_LOGICO       reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    TIMES           reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    DIVIDE          reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    TIMESX          reduce using rule 54 (additive_expression -> term PLUSPLUS .)
    RBRACE          reduce using rule 54 (additive_expression -> term PLUSPLUS .)


state 69

    (57) term -> term mulop . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    factor                         shift and go to state 98
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 70

    (59) mulop -> TIMES .

    LPAREN          reduce using rule 59 (mulop -> TIMES .)
    NUMBER          reduce using rule 59 (mulop -> TIMES .)
    IDENTIFIER      reduce using rule 59 (mulop -> TIMES .)
    TRUE            reduce using rule 59 (mulop -> TIMES .)
    FALSE           reduce using rule 59 (mulop -> TIMES .)


state 71

    (60) mulop -> DIVIDE .

    LPAREN          reduce using rule 60 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 60 (mulop -> DIVIDE .)
    IDENTIFIER      reduce using rule 60 (mulop -> DIVIDE .)
    TRUE            reduce using rule 60 (mulop -> DIVIDE .)
    FALSE           reduce using rule 60 (mulop -> DIVIDE .)


state 72

    (61) factor -> LPAREN expression . RPAREN
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          shift and go to state 99
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 73

    (8) print_stmt -> PRINT LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 100


state 74

    (13) print_stmt -> PRINT LPAREN RPAREN SEMI .

    IDENTIFIER      reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    IF              reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    FOR             reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    DO              reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    $end            reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 13 (print_stmt -> PRINT LPAREN RPAREN SEMI .)


state 75

    (9) print_stmt -> PRINT LPAREN IDENTIFIER RPAREN . SEMI

    SEMI            shift and go to state 101


state 76

    (10) print_stmt -> PRINT LPAREN NUMBER RPAREN . SEMI

    SEMI            shift and go to state 102


state 77

    (11) print_stmt -> PRINT LPAREN boolean RPAREN . SEMI

    SEMI            shift and go to state 103


state 78

    (12) print_stmt -> PRINT LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 104


state 79

    (40) expression -> expression LOG . expression
    (76) expression -> expression LOG . term
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 105
    term                           shift and go to state 106
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    factor                         shift and go to state 30
    additive_expression            shift and go to state 28
    boolean                        shift and go to state 44

state 80

    (41) expression -> expression OU_LOGICO . expression
    (77) expression -> expression OU_LOGICO . term
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 107
    term                           shift and go to state 108
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    factor                         shift and go to state 30
    additive_expression            shift and go to state 28
    boolean                        shift and go to state 44

state 81

    (71) expression -> expression PLUS . term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    term                           shift and go to state 109
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 82

    (72) expression -> expression MINUS . term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    term                           shift and go to state 110
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 83

    (73) expression -> expression TIMES . term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    term                           shift and go to state 111
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 84

    (74) expression -> expression DIVIDE . term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    term                           shift and go to state 112
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 85

    (75) expression -> expression TIMESX . term
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    term                           shift and go to state 113
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 86

    (37) expression -> var EQUALITY . expression
    (39) expression -> var EQUALITY . IDENTIFIER
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 115
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    var                            shift and go to state 39
    expression                     shift and go to state 114
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 87

    (28) selection_stmt -> IF LPAREN expression RPAREN . LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> IF LPAREN expression RPAREN . LBRACE expression RBRACE statement
    (30) selection_stmt -> IF LPAREN expression RPAREN . LBRACE print_stmt RBRACE
    (31) selection_stmt -> IF LPAREN expression RPAREN . LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE

    LBRACE          shift and go to state 116


state 88

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI . expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI . expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 117
    additive_expression            shift and go to state 28
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 89

    (34) iteration_stmt -> WHILE LPAREN expression RPAREN . LBRACE expression RBRACE statement
    (35) iteration_stmt -> WHILE LPAREN expression RPAREN . LBRACE print_stmt RBRACE

    LBRACE          shift and go to state 118


state 90

    (36) iteration_stmt -> DO LBRACE statement SEMI . RBRACE WHILE LPAREN expression RPAREN

    RBRACE          shift and go to state 119


state 91

    (65) factor -> IDENTIFIER LPAREN args . RPAREN

    RPAREN          shift and go to state 120


state 92

    (68) args -> args_list .

    RPAREN          reduce using rule 68 (args -> args_list .)


state 93

    (69) args -> empty .

    RPAREN          reduce using rule 69 (args -> empty .)


state 94

    (70) args_list -> expression .
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          reduce using rule 70 (args_list -> expression .)
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 95

    (43) simple_expression -> additive_expression relop additive_expression .
    (51) additive_expression -> additive_expression . addop term
    (55) addop -> . PLUS
    (56) addop -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    IDENTIFIER      reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    PRINT           reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    IF              reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    FOR             reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    WHILE           reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    DO              reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    $end            reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    SEMI            reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    LOG             reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    OU_LOGICO       reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    TIMES           reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    DIVIDE          reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    TIMESX          reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    RBRACE          reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66

  ! PLUS            [ reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .) ]
  ! MINUS           [ reduce using rule 43 (simple_expression -> additive_expression relop additive_expression .) ]

    addop                          shift and go to state 58

state 96

    (65) factor -> IDENTIFIER . LPAREN args RPAREN
    (42) var -> IDENTIFIER .

    LPAREN          shift and go to state 54
    MINUSMINUS      reduce using rule 42 (var -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 42 (var -> IDENTIFIER .)
    TIMES           reduce using rule 42 (var -> IDENTIFIER .)
    DIVIDE          reduce using rule 42 (var -> IDENTIFIER .)
    PLUS            reduce using rule 42 (var -> IDENTIFIER .)
    MINUS           reduce using rule 42 (var -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 42 (var -> IDENTIFIER .)
    PRINT           reduce using rule 42 (var -> IDENTIFIER .)
    IF              reduce using rule 42 (var -> IDENTIFIER .)
    FOR             reduce using rule 42 (var -> IDENTIFIER .)
    WHILE           reduce using rule 42 (var -> IDENTIFIER .)
    DO              reduce using rule 42 (var -> IDENTIFIER .)
    $end            reduce using rule 42 (var -> IDENTIFIER .)
    SEMI            reduce using rule 42 (var -> IDENTIFIER .)
    RPAREN          reduce using rule 42 (var -> IDENTIFIER .)
    LOG             reduce using rule 42 (var -> IDENTIFIER .)
    OU_LOGICO       reduce using rule 42 (var -> IDENTIFIER .)
    TIMESX          reduce using rule 42 (var -> IDENTIFIER .)
    RBRACE          reduce using rule 42 (var -> IDENTIFIER .)
    MENOR           reduce using rule 42 (var -> IDENTIFIER .)
    MENOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    MAIOR           reduce using rule 42 (var -> IDENTIFIER .)
    MAIOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    DIFERENTE       reduce using rule 42 (var -> IDENTIFIER .)
    EQUALITY        reduce using rule 42 (var -> IDENTIFIER .)


state 97

    (51) additive_expression -> additive_expression addop term .
    (57) term -> term . mulop factor
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    MENOR           reduce using rule 51 (additive_expression -> additive_expression addop term .)
    MENOREQUALS     reduce using rule 51 (additive_expression -> additive_expression addop term .)
    MAIOR           reduce using rule 51 (additive_expression -> additive_expression addop term .)
    MAIOREQUALS     reduce using rule 51 (additive_expression -> additive_expression addop term .)
    DIFERENTE       reduce using rule 51 (additive_expression -> additive_expression addop term .)
    EQUALITY        reduce using rule 51 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 51 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 51 (additive_expression -> additive_expression addop term .)
    IDENTIFIER      reduce using rule 51 (additive_expression -> additive_expression addop term .)
    PRINT           reduce using rule 51 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 51 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 51 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 51 (additive_expression -> additive_expression addop term .)
    DO              reduce using rule 51 (additive_expression -> additive_expression addop term .)
    $end            reduce using rule 51 (additive_expression -> additive_expression addop term .)
    SEMI            reduce using rule 51 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 51 (additive_expression -> additive_expression addop term .)
    LOG             reduce using rule 51 (additive_expression -> additive_expression addop term .)
    OU_LOGICO       reduce using rule 51 (additive_expression -> additive_expression addop term .)
    TIMESX          reduce using rule 51 (additive_expression -> additive_expression addop term .)
    RBRACE          reduce using rule 51 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71

  ! TIMES           [ reduce using rule 51 (additive_expression -> additive_expression addop term .) ]
  ! DIVIDE          [ reduce using rule 51 (additive_expression -> additive_expression addop term .) ]

    mulop                          shift and go to state 69

state 98

    (57) term -> term mulop factor .

    MINUSMINUS      reduce using rule 57 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 57 (term -> term mulop factor .)
    TIMES           reduce using rule 57 (term -> term mulop factor .)
    DIVIDE          reduce using rule 57 (term -> term mulop factor .)
    MENOR           reduce using rule 57 (term -> term mulop factor .)
    MENOREQUALS     reduce using rule 57 (term -> term mulop factor .)
    MAIOR           reduce using rule 57 (term -> term mulop factor .)
    MAIOREQUALS     reduce using rule 57 (term -> term mulop factor .)
    DIFERENTE       reduce using rule 57 (term -> term mulop factor .)
    EQUALITY        reduce using rule 57 (term -> term mulop factor .)
    PLUS            reduce using rule 57 (term -> term mulop factor .)
    MINUS           reduce using rule 57 (term -> term mulop factor .)
    IDENTIFIER      reduce using rule 57 (term -> term mulop factor .)
    PRINT           reduce using rule 57 (term -> term mulop factor .)
    IF              reduce using rule 57 (term -> term mulop factor .)
    FOR             reduce using rule 57 (term -> term mulop factor .)
    WHILE           reduce using rule 57 (term -> term mulop factor .)
    DO              reduce using rule 57 (term -> term mulop factor .)
    $end            reduce using rule 57 (term -> term mulop factor .)
    SEMI            reduce using rule 57 (term -> term mulop factor .)
    RPAREN          reduce using rule 57 (term -> term mulop factor .)
    LOG             reduce using rule 57 (term -> term mulop factor .)
    OU_LOGICO       reduce using rule 57 (term -> term mulop factor .)
    TIMESX          reduce using rule 57 (term -> term mulop factor .)
    RBRACE          reduce using rule 57 (term -> term mulop factor .)


state 99

    (61) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    MENOREQUALS     reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    MAIOREQUALS     reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    EQUALITY        reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    LOG             reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    OU_LOGICO       reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    TIMESX          reduce using rule 61 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 61 (factor -> LPAREN expression RPAREN .)


state 100

    (8) print_stmt -> PRINT LPAREN STRING RPAREN SEMI .

    IDENTIFIER      reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    PRINT           reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    $end            reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    SEMI            reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 8 (print_stmt -> PRINT LPAREN STRING RPAREN SEMI .)


state 101

    (9) print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .

    IDENTIFIER      reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    PRINT           reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    IF              reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    FOR             reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    WHILE           reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    DO              reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    $end            reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    SEMI            reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)
    RBRACE          reduce using rule 9 (print_stmt -> PRINT LPAREN IDENTIFIER RPAREN SEMI .)


state 102

    (10) print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .

    IDENTIFIER      reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    PRINT           reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    IF              reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    FOR             reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    WHILE           reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    DO              reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    $end            reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    SEMI            reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)
    RBRACE          reduce using rule 10 (print_stmt -> PRINT LPAREN NUMBER RPAREN SEMI .)


state 103

    (11) print_stmt -> PRINT LPAREN boolean RPAREN SEMI .

    IDENTIFIER      reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    PRINT           reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    IF              reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    FOR             reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    WHILE           reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    DO              reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    $end            reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    SEMI            reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)
    RBRACE          reduce using rule 11 (print_stmt -> PRINT LPAREN boolean RPAREN SEMI .)


state 104

    (12) print_stmt -> PRINT LPAREN expression RPAREN SEMI .

    IDENTIFIER      reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    $end            reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 12 (print_stmt -> PRINT LPAREN expression RPAREN SEMI .)


state 105

    (40) expression -> expression LOG expression .
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          reduce using rule 40 (expression -> expression LOG expression .)
    LOG             reduce using rule 40 (expression -> expression LOG expression .)
    OU_LOGICO       reduce using rule 40 (expression -> expression LOG expression .)
    TIMESX          reduce using rule 40 (expression -> expression LOG expression .)
    SEMI            reduce using rule 40 (expression -> expression LOG expression .)
    RBRACE          reduce using rule 40 (expression -> expression LOG expression .)
    IDENTIFIER      reduce using rule 40 (expression -> expression LOG expression .)
    PRINT           reduce using rule 40 (expression -> expression LOG expression .)
    IF              reduce using rule 40 (expression -> expression LOG expression .)
    FOR             reduce using rule 40 (expression -> expression LOG expression .)
    WHILE           reduce using rule 40 (expression -> expression LOG expression .)
    DO              reduce using rule 40 (expression -> expression LOG expression .)
    $end            reduce using rule 40 (expression -> expression LOG expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 40 (expression -> expression LOG expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression LOG expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression LOG expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression LOG expression .) ]
  ! LOG             [ shift and go to state 79 ]
  ! OU_LOGICO       [ shift and go to state 80 ]
  ! TIMESX          [ shift and go to state 85 ]


state 106

    (76) expression -> expression LOG term .
    (57) term -> term . mulop factor
    (52) additive_expression -> term .
    (53) additive_expression -> term . MINUSMINUS
    (54) additive_expression -> term . PLUSPLUS
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

  ! reduce/reduce conflict for PLUS resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for LOG resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for OU_LOGICO resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for TIMES resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for TIMESX resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for SEMI resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for RBRACE resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for PRINT resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for IF resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for DO resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for $end resolved using rule 52 (additive_expression -> term .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    MENOR           reduce using rule 52 (additive_expression -> term .)
    MENOREQUALS     reduce using rule 52 (additive_expression -> term .)
    MAIOR           reduce using rule 52 (additive_expression -> term .)
    MAIOREQUALS     reduce using rule 52 (additive_expression -> term .)
    DIFERENTE       reduce using rule 52 (additive_expression -> term .)
    EQUALITY        reduce using rule 52 (additive_expression -> term .)
    PLUS            reduce using rule 52 (additive_expression -> term .)
    MINUS           reduce using rule 52 (additive_expression -> term .)
    LOG             reduce using rule 52 (additive_expression -> term .)
    OU_LOGICO       reduce using rule 52 (additive_expression -> term .)
    TIMESX          reduce using rule 52 (additive_expression -> term .)
    RPAREN          reduce using rule 52 (additive_expression -> term .)
    SEMI            reduce using rule 52 (additive_expression -> term .)
    RBRACE          reduce using rule 52 (additive_expression -> term .)
    IDENTIFIER      reduce using rule 52 (additive_expression -> term .)
    PRINT           reduce using rule 52 (additive_expression -> term .)
    IF              reduce using rule 52 (additive_expression -> term .)
    FOR             reduce using rule 52 (additive_expression -> term .)
    WHILE           reduce using rule 52 (additive_expression -> term .)
    DO              reduce using rule 52 (additive_expression -> term .)
    $end            reduce using rule 52 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 67
    PLUSPLUS        shift and go to state 68
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71

  ! RPAREN          [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! LOG             [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! OU_LOGICO       [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! PLUS            [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! TIMESX          [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! SEMI            [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! RBRACE          [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! IDENTIFIER      [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! PRINT           [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! IF              [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! FOR             [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! WHILE           [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! DO              [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! $end            [ reduce using rule 76 (expression -> expression LOG term .) ]
  ! TIMES           [ reduce using rule 52 (additive_expression -> term .) ]
  ! DIVIDE          [ reduce using rule 52 (additive_expression -> term .) ]

    mulop                          shift and go to state 69

state 107

    (41) expression -> expression OU_LOGICO expression .
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    LOG             reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    OU_LOGICO       reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    TIMESX          reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    SEMI            reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    RBRACE          reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    IDENTIFIER      reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    PRINT           reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    IF              reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    FOR             reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    WHILE           reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    DO              reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    $end            reduce using rule 41 (expression -> expression OU_LOGICO expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 41 (expression -> expression OU_LOGICO expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression OU_LOGICO expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression OU_LOGICO expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression OU_LOGICO expression .) ]
  ! LOG             [ shift and go to state 79 ]
  ! OU_LOGICO       [ shift and go to state 80 ]
  ! TIMESX          [ shift and go to state 85 ]


state 108

    (77) expression -> expression OU_LOGICO term .
    (57) term -> term . mulop factor
    (52) additive_expression -> term .
    (53) additive_expression -> term . MINUSMINUS
    (54) additive_expression -> term . PLUSPLUS
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

  ! reduce/reduce conflict for PLUS resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for MINUS resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for LOG resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for OU_LOGICO resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for TIMES resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for TIMESX resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for SEMI resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for RBRACE resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for PRINT resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for IF resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for WHILE resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for DO resolved using rule 52 (additive_expression -> term .)
  ! reduce/reduce conflict for $end resolved using rule 52 (additive_expression -> term .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    MENOR           reduce using rule 52 (additive_expression -> term .)
    MENOREQUALS     reduce using rule 52 (additive_expression -> term .)
    MAIOR           reduce using rule 52 (additive_expression -> term .)
    MAIOREQUALS     reduce using rule 52 (additive_expression -> term .)
    DIFERENTE       reduce using rule 52 (additive_expression -> term .)
    EQUALITY        reduce using rule 52 (additive_expression -> term .)
    PLUS            reduce using rule 52 (additive_expression -> term .)
    MINUS           reduce using rule 52 (additive_expression -> term .)
    LOG             reduce using rule 52 (additive_expression -> term .)
    OU_LOGICO       reduce using rule 52 (additive_expression -> term .)
    TIMESX          reduce using rule 52 (additive_expression -> term .)
    RPAREN          reduce using rule 52 (additive_expression -> term .)
    SEMI            reduce using rule 52 (additive_expression -> term .)
    RBRACE          reduce using rule 52 (additive_expression -> term .)
    IDENTIFIER      reduce using rule 52 (additive_expression -> term .)
    PRINT           reduce using rule 52 (additive_expression -> term .)
    IF              reduce using rule 52 (additive_expression -> term .)
    FOR             reduce using rule 52 (additive_expression -> term .)
    WHILE           reduce using rule 52 (additive_expression -> term .)
    DO              reduce using rule 52 (additive_expression -> term .)
    $end            reduce using rule 52 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 67
    PLUSPLUS        shift and go to state 68
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71

  ! RPAREN          [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! LOG             [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! OU_LOGICO       [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! PLUS            [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! TIMES           [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! TIMESX          [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! SEMI            [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! RBRACE          [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! IDENTIFIER      [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! PRINT           [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! IF              [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! FOR             [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! WHILE           [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! DO              [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! $end            [ reduce using rule 77 (expression -> expression OU_LOGICO term .) ]
  ! TIMES           [ reduce using rule 52 (additive_expression -> term .) ]
  ! DIVIDE          [ reduce using rule 52 (additive_expression -> term .) ]

    mulop                          shift and go to state 69

state 109

    (71) expression -> expression PLUS term .
    (57) term -> term . mulop factor
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

    RPAREN          reduce using rule 71 (expression -> expression PLUS term .)
    LOG             reduce using rule 71 (expression -> expression PLUS term .)
    OU_LOGICO       reduce using rule 71 (expression -> expression PLUS term .)
    PLUS            reduce using rule 71 (expression -> expression PLUS term .)
    MINUS           reduce using rule 71 (expression -> expression PLUS term .)
    TIMESX          reduce using rule 71 (expression -> expression PLUS term .)
    SEMI            reduce using rule 71 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 71 (expression -> expression PLUS term .)
    IDENTIFIER      reduce using rule 71 (expression -> expression PLUS term .)
    PRINT           reduce using rule 71 (expression -> expression PLUS term .)
    IF              reduce using rule 71 (expression -> expression PLUS term .)
    FOR             reduce using rule 71 (expression -> expression PLUS term .)
    WHILE           reduce using rule 71 (expression -> expression PLUS term .)
    DO              reduce using rule 71 (expression -> expression PLUS term .)
    $end            reduce using rule 71 (expression -> expression PLUS term .)
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71

  ! TIMES           [ reduce using rule 71 (expression -> expression PLUS term .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression PLUS term .) ]

    mulop                          shift and go to state 69

state 110

    (72) expression -> expression MINUS term .
    (57) term -> term . mulop factor
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

    RPAREN          reduce using rule 72 (expression -> expression MINUS term .)
    LOG             reduce using rule 72 (expression -> expression MINUS term .)
    OU_LOGICO       reduce using rule 72 (expression -> expression MINUS term .)
    PLUS            reduce using rule 72 (expression -> expression MINUS term .)
    MINUS           reduce using rule 72 (expression -> expression MINUS term .)
    TIMESX          reduce using rule 72 (expression -> expression MINUS term .)
    SEMI            reduce using rule 72 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 72 (expression -> expression MINUS term .)
    IDENTIFIER      reduce using rule 72 (expression -> expression MINUS term .)
    PRINT           reduce using rule 72 (expression -> expression MINUS term .)
    IF              reduce using rule 72 (expression -> expression MINUS term .)
    FOR             reduce using rule 72 (expression -> expression MINUS term .)
    WHILE           reduce using rule 72 (expression -> expression MINUS term .)
    DO              reduce using rule 72 (expression -> expression MINUS term .)
    $end            reduce using rule 72 (expression -> expression MINUS term .)
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71

  ! TIMES           [ reduce using rule 72 (expression -> expression MINUS term .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression MINUS term .) ]

    mulop                          shift and go to state 69

state 111

    (73) expression -> expression TIMES term .
    (57) term -> term . mulop factor
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

    RPAREN          reduce using rule 73 (expression -> expression TIMES term .)
    LOG             reduce using rule 73 (expression -> expression TIMES term .)
    OU_LOGICO       reduce using rule 73 (expression -> expression TIMES term .)
    PLUS            reduce using rule 73 (expression -> expression TIMES term .)
    MINUS           reduce using rule 73 (expression -> expression TIMES term .)
    TIMES           reduce using rule 73 (expression -> expression TIMES term .)
    DIVIDE          reduce using rule 73 (expression -> expression TIMES term .)
    TIMESX          reduce using rule 73 (expression -> expression TIMES term .)
    SEMI            reduce using rule 73 (expression -> expression TIMES term .)
    RBRACE          reduce using rule 73 (expression -> expression TIMES term .)
    IDENTIFIER      reduce using rule 73 (expression -> expression TIMES term .)
    PRINT           reduce using rule 73 (expression -> expression TIMES term .)
    IF              reduce using rule 73 (expression -> expression TIMES term .)
    FOR             reduce using rule 73 (expression -> expression TIMES term .)
    WHILE           reduce using rule 73 (expression -> expression TIMES term .)
    DO              reduce using rule 73 (expression -> expression TIMES term .)
    $end            reduce using rule 73 (expression -> expression TIMES term .)

  ! TIMES           [ shift and go to state 70 ]
  ! DIVIDE          [ shift and go to state 71 ]

    mulop                          shift and go to state 69

state 112

    (74) expression -> expression DIVIDE term .
    (57) term -> term . mulop factor
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

    RPAREN          reduce using rule 74 (expression -> expression DIVIDE term .)
    LOG             reduce using rule 74 (expression -> expression DIVIDE term .)
    OU_LOGICO       reduce using rule 74 (expression -> expression DIVIDE term .)
    PLUS            reduce using rule 74 (expression -> expression DIVIDE term .)
    MINUS           reduce using rule 74 (expression -> expression DIVIDE term .)
    TIMES           reduce using rule 74 (expression -> expression DIVIDE term .)
    DIVIDE          reduce using rule 74 (expression -> expression DIVIDE term .)
    TIMESX          reduce using rule 74 (expression -> expression DIVIDE term .)
    SEMI            reduce using rule 74 (expression -> expression DIVIDE term .)
    RBRACE          reduce using rule 74 (expression -> expression DIVIDE term .)
    IDENTIFIER      reduce using rule 74 (expression -> expression DIVIDE term .)
    PRINT           reduce using rule 74 (expression -> expression DIVIDE term .)
    IF              reduce using rule 74 (expression -> expression DIVIDE term .)
    FOR             reduce using rule 74 (expression -> expression DIVIDE term .)
    WHILE           reduce using rule 74 (expression -> expression DIVIDE term .)
    DO              reduce using rule 74 (expression -> expression DIVIDE term .)
    $end            reduce using rule 74 (expression -> expression DIVIDE term .)

  ! TIMES           [ shift and go to state 70 ]
  ! DIVIDE          [ shift and go to state 71 ]

    mulop                          shift and go to state 69

state 113

    (75) expression -> expression TIMESX term .
    (57) term -> term . mulop factor
    (59) mulop -> . TIMES
    (60) mulop -> . DIVIDE

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    RPAREN          reduce using rule 75 (expression -> expression TIMESX term .)
    LOG             reduce using rule 75 (expression -> expression TIMESX term .)
    OU_LOGICO       reduce using rule 75 (expression -> expression TIMESX term .)
    PLUS            reduce using rule 75 (expression -> expression TIMESX term .)
    MINUS           reduce using rule 75 (expression -> expression TIMESX term .)
    TIMESX          reduce using rule 75 (expression -> expression TIMESX term .)
    SEMI            reduce using rule 75 (expression -> expression TIMESX term .)
    RBRACE          reduce using rule 75 (expression -> expression TIMESX term .)
    IDENTIFIER      reduce using rule 75 (expression -> expression TIMESX term .)
    PRINT           reduce using rule 75 (expression -> expression TIMESX term .)
    IF              reduce using rule 75 (expression -> expression TIMESX term .)
    FOR             reduce using rule 75 (expression -> expression TIMESX term .)
    WHILE           reduce using rule 75 (expression -> expression TIMESX term .)
    DO              reduce using rule 75 (expression -> expression TIMESX term .)
    $end            reduce using rule 75 (expression -> expression TIMESX term .)
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71

  ! TIMES           [ reduce using rule 75 (expression -> expression TIMESX term .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression TIMESX term .) ]

    mulop                          shift and go to state 69

state 114

    (37) expression -> var EQUALITY expression .
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          reduce using rule 37 (expression -> var EQUALITY expression .)
    LOG             reduce using rule 37 (expression -> var EQUALITY expression .)
    OU_LOGICO       reduce using rule 37 (expression -> var EQUALITY expression .)
    TIMESX          reduce using rule 37 (expression -> var EQUALITY expression .)
    SEMI            reduce using rule 37 (expression -> var EQUALITY expression .)
    RBRACE          reduce using rule 37 (expression -> var EQUALITY expression .)
    IDENTIFIER      reduce using rule 37 (expression -> var EQUALITY expression .)
    PRINT           reduce using rule 37 (expression -> var EQUALITY expression .)
    IF              reduce using rule 37 (expression -> var EQUALITY expression .)
    FOR             reduce using rule 37 (expression -> var EQUALITY expression .)
    WHILE           reduce using rule 37 (expression -> var EQUALITY expression .)
    DO              reduce using rule 37 (expression -> var EQUALITY expression .)
    $end            reduce using rule 37 (expression -> var EQUALITY expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 37 (expression -> var EQUALITY expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> var EQUALITY expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> var EQUALITY expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> var EQUALITY expression .) ]
  ! LOG             [ shift and go to state 79 ]
  ! OU_LOGICO       [ shift and go to state 80 ]
  ! TIMESX          [ shift and go to state 85 ]


state 115

    (39) expression -> var EQUALITY IDENTIFIER .
    (42) var -> IDENTIFIER .
    (65) factor -> IDENTIFIER . LPAREN args RPAREN

  ! reduce/reduce conflict for TIMES resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for LOG resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for OU_LOGICO resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for TIMESX resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for SEMI resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for PRINT resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for IF resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for WHILE resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for DO resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    RPAREN          reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    LOG             reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    OU_LOGICO       reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    PLUS            reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    MINUS           reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    TIMES           reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    DIVIDE          reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    TIMESX          reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    SEMI            reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    RBRACE          reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    IDENTIFIER      reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    PRINT           reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    IF              reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    FOR             reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    WHILE           reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    DO              reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    $end            reduce using rule 39 (expression -> var EQUALITY IDENTIFIER .)
    EQUALITY        reduce using rule 42 (var -> IDENTIFIER .)
    MINUSMINUS      reduce using rule 42 (var -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 42 (var -> IDENTIFIER .)
    MENOR           reduce using rule 42 (var -> IDENTIFIER .)
    MENOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    MAIOR           reduce using rule 42 (var -> IDENTIFIER .)
    MAIOREQUALS     reduce using rule 42 (var -> IDENTIFIER .)
    DIFERENTE       reduce using rule 42 (var -> IDENTIFIER .)
    LPAREN          shift and go to state 54

  ! TIMES           [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! DIVIDE          [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! LOG             [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! OU_LOGICO       [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! TIMESX          [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! SEMI            [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! RBRACE          [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! PRINT           [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! DO              [ reduce using rule 42 (var -> IDENTIFIER .) ]
  ! $end            [ reduce using rule 42 (var -> IDENTIFIER .) ]


state 116

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE . expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> IF LPAREN expression RPAREN LBRACE . expression RBRACE statement
    (30) selection_stmt -> IF LPAREN expression RPAREN LBRACE . print_stmt RBRACE
    (31) selection_stmt -> IF LPAREN expression RPAREN LBRACE . print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 121
    print_stmt                     shift and go to state 122
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    boolean                        shift and go to state 44
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30

state 117

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression . SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI expression . SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    SEMI            shift and go to state 123
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 118

    (34) iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE . expression RBRACE statement
    (35) iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE . print_stmt RBRACE
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 124
    print_stmt                     shift and go to state 125
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    boolean                        shift and go to state 44
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30

state 119

    (36) iteration_stmt -> DO LBRACE statement SEMI RBRACE . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 126


state 120

    (65) factor -> IDENTIFIER LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    TIMES           reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    DIVIDE          reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    MENOR           reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    MENOREQUALS     reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    MAIOR           reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    MAIOREQUALS     reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    DIFERENTE       reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    EQUALITY        reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    PLUS            reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    MINUS           reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    IDENTIFIER      reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    PRINT           reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    IF              reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    FOR             reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    WHILE           reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    DO              reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    $end            reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    SEMI            reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    RPAREN          reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    LOG             reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    OU_LOGICO       reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    TIMESX          reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)
    RBRACE          reduce using rule 65 (factor -> IDENTIFIER LPAREN args RPAREN .)


state 121

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression . RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression . RBRACE statement
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RBRACE          shift and go to state 127
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 122

    (30) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt . RBRACE
    (31) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt . RBRACE ELSE LBRACE print_stmt RBRACE

    RBRACE          shift and go to state 128


state 123

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI . additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI . additive_expression RPAREN LBRACE print_stmt RBRACE
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (42) var -> . IDENTIFIER
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    IDENTIFIER      shift and go to state 96
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    additive_expression            shift and go to state 129
    term                           shift and go to state 29
    factor                         shift and go to state 30
    var                            shift and go to state 32
    boolean                        shift and go to state 44

state 124

    (34) iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression . RBRACE statement
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RBRACE          shift and go to state 130
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 125

    (35) iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt . RBRACE

    RBRACE          shift and go to state 131


state 126

    (36) iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 132


state 127

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE . ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE . statement
    (23) statement -> . expression_stmt
    (24) statement -> . selection_stmt
    (25) statement -> . iteration_stmt
    (26) statement -> . print_stmt
    (27) expression_stmt -> . expression
    (28) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (32) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (36) iteration_stmt -> . DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    ELSE            shift and go to state 133
    IF              shift and go to state 10
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 48
    statement                      shift and go to state 134
    expression_stmt                shift and go to state 49
    selection_stmt                 shift and go to state 50
    iteration_stmt                 shift and go to state 51
    print_stmt                     shift and go to state 52
    additive_expression            shift and go to state 28
    boolean                        shift and go to state 44
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 128

    (30) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .
    (31) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE . ELSE LBRACE print_stmt RBRACE

    IDENTIFIER      reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    PRINT           reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    IF              reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    FOR             reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    WHILE           reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    DO              reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    $end            reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    SEMI            reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    ELSE            shift and go to state 135


state 129

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression . RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression . RPAREN LBRACE print_stmt RBRACE
    (51) additive_expression -> additive_expression . addop term
    (55) addop -> . PLUS
    (56) addop -> . MINUS

    RPAREN          shift and go to state 136
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66

    addop                          shift and go to state 58

state 130

    (34) iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE . statement
    (23) statement -> . expression_stmt
    (24) statement -> . selection_stmt
    (25) statement -> . iteration_stmt
    (26) statement -> . print_stmt
    (27) expression_stmt -> . expression
    (28) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (32) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (36) iteration_stmt -> . DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IF              shift and go to state 10
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 48
    statement                      shift and go to state 137
    expression_stmt                shift and go to state 49
    selection_stmt                 shift and go to state 50
    iteration_stmt                 shift and go to state 51
    print_stmt                     shift and go to state 52
    additive_expression            shift and go to state 28
    boolean                        shift and go to state 44
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 131

    (35) iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .

    IDENTIFIER      reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    PRINT           reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    IF              reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    FOR             reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    WHILE           reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    DO              reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    $end            reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)
    SEMI            reduce using rule 35 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE .)


state 132

    (36) iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN . expression RPAREN
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 138
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 133

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE . LBRACE expression RBRACE statement

    LBRACE          shift and go to state 139


state 134

    (29) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .

    IDENTIFIER      reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    PRINT           reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    IF              reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    FOR             reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    WHILE           reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    DO              reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    $end            reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    SEMI            reduce using rule 29 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE statement .)


state 135

    (31) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE . LBRACE print_stmt RBRACE

    LBRACE          shift and go to state 140


state 136

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN . LBRACE expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN . LBRACE print_stmt RBRACE

    LBRACE          shift and go to state 141


state 137

    (34) iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .

    IDENTIFIER      reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    PRINT           reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    IF              reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    FOR             reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    WHILE           reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    DO              reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    $end            reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)
    SEMI            reduce using rule 34 (iteration_stmt -> WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement .)


state 138

    (36) iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression . RPAREN
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RPAREN          shift and go to state 142
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 139

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE . expression RBRACE statement
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 143
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    additive_expression            shift and go to state 28
    factor                         shift and go to state 30
    boolean                        shift and go to state 44

state 140

    (31) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE . print_stmt RBRACE
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI

    PRINT           shift and go to state 9

    print_stmt                     shift and go to state 144

state 141

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE . expression RBRACE statement
    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE . print_stmt RBRACE
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 145
    additive_expression            shift and go to state 28
    print_stmt                     shift and go to state 146
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    boolean                        shift and go to state 44
    factor                         shift and go to state 30

state 142

    (36) iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .

    IDENTIFIER      reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)
    PRINT           reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)
    SEMI            reduce using rule 36 (iteration_stmt -> DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN .)


state 143

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression . RBRACE statement
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RBRACE          shift and go to state 147
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 144

    (31) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt . RBRACE

    RBRACE          shift and go to state 148


state 145

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression . RBRACE statement
    (40) expression -> expression . LOG expression
    (41) expression -> expression . OU_LOGICO expression
    (71) expression -> expression . PLUS term
    (72) expression -> expression . MINUS term
    (73) expression -> expression . TIMES term
    (74) expression -> expression . DIVIDE term
    (75) expression -> expression . TIMESX term
    (76) expression -> expression . LOG term
    (77) expression -> expression . OU_LOGICO term

    RBRACE          shift and go to state 149
    LOG             shift and go to state 79
    OU_LOGICO       shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    TIMESX          shift and go to state 85


state 146

    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt . RBRACE

    RBRACE          shift and go to state 150


state 147

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE . statement
    (23) statement -> . expression_stmt
    (24) statement -> . selection_stmt
    (25) statement -> . iteration_stmt
    (26) statement -> . print_stmt
    (27) expression_stmt -> . expression
    (28) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (32) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (36) iteration_stmt -> . DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IF              shift and go to state 10
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 48
    statement                      shift and go to state 151
    expression_stmt                shift and go to state 49
    selection_stmt                 shift and go to state 50
    iteration_stmt                 shift and go to state 51
    print_stmt                     shift and go to state 52
    additive_expression            shift and go to state 28
    boolean                        shift and go to state 44
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 148

    (31) selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .

    IDENTIFIER      reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)
    PRINT           reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)
    IF              reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)
    FOR             reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)
    WHILE           reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)
    DO              reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)
    $end            reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)
    SEMI            reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE .)


state 149

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE . statement
    (23) statement -> . expression_stmt
    (24) statement -> . selection_stmt
    (25) statement -> . iteration_stmt
    (26) statement -> . print_stmt
    (27) expression_stmt -> . expression
    (28) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement
    (29) selection_stmt -> . IF LPAREN expression RPAREN LBRACE expression RBRACE statement
    (30) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (31) selection_stmt -> . IF LPAREN expression RPAREN LBRACE print_stmt RBRACE ELSE LBRACE print_stmt RBRACE
    (32) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement
    (33) iteration_stmt -> . FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE
    (34) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE expression RBRACE statement
    (35) iteration_stmt -> . WHILE LPAREN expression RPAREN LBRACE print_stmt RBRACE
    (36) iteration_stmt -> . DO LBRACE statement SEMI RBRACE WHILE LPAREN expression RPAREN
    (8) print_stmt -> . PRINT LPAREN STRING RPAREN SEMI
    (9) print_stmt -> . PRINT LPAREN IDENTIFIER RPAREN SEMI
    (10) print_stmt -> . PRINT LPAREN NUMBER RPAREN SEMI
    (11) print_stmt -> . PRINT LPAREN boolean RPAREN SEMI
    (12) print_stmt -> . PRINT LPAREN expression RPAREN SEMI
    (13) print_stmt -> . PRINT LPAREN RPAREN SEMI
    (37) expression -> . var EQUALITY expression
    (38) expression -> . simple_expression
    (39) expression -> . var EQUALITY IDENTIFIER
    (40) expression -> . expression LOG expression
    (41) expression -> . expression OU_LOGICO expression
    (71) expression -> . expression PLUS term
    (72) expression -> . expression MINUS term
    (73) expression -> . expression TIMES term
    (74) expression -> . expression DIVIDE term
    (75) expression -> . expression TIMESX term
    (76) expression -> . expression LOG term
    (77) expression -> . expression OU_LOGICO term
    (42) var -> . IDENTIFIER
    (43) simple_expression -> . additive_expression relop additive_expression
    (44) simple_expression -> . additive_expression
    (51) additive_expression -> . additive_expression addop term
    (52) additive_expression -> . term
    (53) additive_expression -> . term MINUSMINUS
    (54) additive_expression -> . term PLUSPLUS
    (57) term -> . term mulop factor
    (58) term -> . factor
    (61) factor -> . LPAREN expression RPAREN
    (62) factor -> . var
    (63) factor -> . NUMBER
    (64) factor -> . boolean
    (65) factor -> . IDENTIFIER LPAREN args RPAREN
    (66) boolean -> . TRUE
    (67) boolean -> . FALSE

    IF              shift and go to state 10
    FOR             shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    PRINT           shift and go to state 9
    IDENTIFIER      shift and go to state 42
    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 43
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 48
    additive_expression            shift and go to state 28
    statement                      shift and go to state 152
    expression_stmt                shift and go to state 49
    selection_stmt                 shift and go to state 50
    iteration_stmt                 shift and go to state 51
    print_stmt                     shift and go to state 52
    boolean                        shift and go to state 44
    var                            shift and go to state 39
    simple_expression              shift and go to state 40
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 150

    (33) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .

    IDENTIFIER      reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)
    PRINT           reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)
    IF              reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)
    FOR             reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)
    WHILE           reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)
    DO              reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)
    $end            reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)
    SEMI            reduce using rule 33 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE print_stmt RBRACE .)


state 151

    (28) selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .

    IDENTIFIER      reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)
    PRINT           reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)
    IF              reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)
    FOR             reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)
    WHILE           reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)
    DO              reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)
    $end            reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)
    SEMI            reduce using rule 28 (selection_stmt -> IF LPAREN expression RPAREN LBRACE expression RBRACE ELSE LBRACE expression RBRACE statement .)


state 152

    (32) iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .

    IDENTIFIER      reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)
    PRINT           reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)
    IF              reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)
    FOR             reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)
    WHILE           reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)
    DO              reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)
    $end            reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)
    SEMI            reduce using rule 32 (iteration_stmt -> FOR LPAREN var_declaration SEMI expression SEMI additive_expression RPAREN LBRACE expression RBRACE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 8 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 22 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 23 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 28 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 28 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 29 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 29 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 35 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 37 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: reduce/reduce conflict in state 22 resolved using rule (var_declaration -> IDENTIFIER ATRIBUTION IDENTIFIER)
WARNING: rejected rule (var -> IDENTIFIER) in state 22
WARNING: reduce/reduce conflict in state 23 resolved using rule (var_declaration -> IDENTIFIER ATRIBUTION NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 23
WARNING: reduce/reduce conflict in state 24 resolved using rule (var_declaration -> IDENTIFIER ATRIBUTION boolean)
WARNING: rejected rule (factor -> boolean) in state 24
WARNING: reduce/reduce conflict in state 106 resolved using rule (additive_expression -> term)
WARNING: rejected rule (expression -> expression LOG term) in state 106
WARNING: reduce/reduce conflict in state 108 resolved using rule (additive_expression -> term)
WARNING: rejected rule (expression -> expression OU_LOGICO term) in state 108
WARNING: reduce/reduce conflict in state 115 resolved using rule (expression -> var EQUALITY IDENTIFIER)
WARNING: rejected rule (var -> IDENTIFIER) in state 115
WARNING: Rule (expression -> expression LOG term) is never reduced
WARNING: Rule (expression -> expression OU_LOGICO term) is never reduced
